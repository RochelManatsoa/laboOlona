{% extends 'tableau_de_bord/base_entreprise.html.twig' %}

{% block title %}{{ package.name }}{% endblock %}
{% block turbo %}  data-turbo="false" {% endblock %}

{% block body %}
<div class="loader-container" id="loader-container" style="display:none;">
    <span class="loader"></span>
</div>

<section class="">
    <div class="breadcrumb-card mb-25 d-md-flex align-items-center justify-content-between">
        <div class="d-flex align-items-center">
            <a href="{{ path('app_tableau_de_bord_entreprise_tarif_choice')}}" class="d-block btn btn-info fw-semibold text-uppercase me-3 btn_retour">
            <i class="mx-2 bi bi-arrow-left"></i>Retour</a>
            <h5 class="mb-0"> {{ package.name }} </h5>
        </div>
        <ol class="breadcrumb list-unstyled mt-0 mb-0 pl-0">
            <li class="breadcrumb-item position-relative">
                <a routerlink="{{ path('app_tableau_de_bord_entreprise')}}" class="d-inline-block position-relative" href="{{ path('app_tableau_de_bord_entreprise')}}">
                <i class="ri-home-8-line"></i> Tableau de bord </a>
            </li>
            <li class="breadcrumb-item position-relative"> Recharger mon crédit </li>
            <li class="breadcrumb-item position-relative"> {{ package.name }} </li>
        </ol>
    </div>
</section>
{% if not entreprise.isIsPremium %}
<section class="warning_freemium mb-4 d-flex align-items-center">
    <span><img src="{{ asset('v2/images/dashboard/warning_outline_icon.svg')}}" alt=""></span>
    <div class="warning-block">
        Vous êtes actuellement sur un plan gratuit. commencez notre <a routerlink="{{ path('app_tableau_de_bord_entreprise_tarifs')}}" class="btn-primary" href="{{ path('app_tableau_de_bord_entreprise_tarifs')}}">abonnement premium</a> pour accéder à notre CVthèque exclusive et publier des annonces en illimité !.
    </div>
</section>
{% endif %}
<section class="tarfis-container tarif_pro_ d-block p-5 mb-4">
    <div class="wrapper-abonnement-c">
        <div class="title-abonnement-c">
            <h1>{{ package.name }}</h1>
            <p>{{ package.description|raw }}</p>
        </div>
        <div class="pack_standard_list m-b30">
            <div class="row">
                <div class="col-md-6">
                    <div class="pack_standard_item m-b30">
                        <div class="ps_media">
                            <div class="flaticon-dashboard"><img src="{{ asset('images/dashboard/icon_premium_plus.svg')}}" alt="icon_premium_plus" width="70" height="70"></div>
                        </div>                                   
                        <div class="ps_content">
                            <a class="btn btn-primary">{{ package.name }}</a>
                            <div class="credit__">{{ package.credit }} <sup>crédits</sup></div>
                            <span>{{ package.price|number_format(0, ',', '.') }} Ariary</span>
                            <span class="euro_">{{ convertToEuro(package.price, devise)|number_format(2, '.', '') }} €</span>
                        </div>                               
                    </div>
                </div>    
                <div class="col-md-6">
                    <div id="paypal-button-container"></div>
                    <div id="message-container" style="display:none;" class="text-center border rounded p-3"></div>
                    <div class="mt-3">
                        {{ form_start(form, {'attr': {'data-turbo': 'false'}}) }}
                        {{ form_widget(form.paymentMethod) }}
                        <div style="display:none;">
                        {{ form_widget(form)}}
                        </div>
                        {{ form_end(form)}}
                    </div>
                </div>                                      
            </div>
        </div>
    </div>
</section>
<script>
    document.querySelectorAll('input[name="order[paymentMethod]"]').forEach((radio) => {
        radio.addEventListener('change', () => radio.form.submit());
    });
    document.addEventListener('turbo:load', function () {
        
        console.log('DOM fully loaded and parsed');
        loadPaypalSdk().then(() => {
            initializePaypalButtons();
            console.log('PayPal SDK loaded and buttons initialized');
        }).catch(error => {
            console.error("Erreur lors du chargement du SDK PayPal:", error);
        });
    });

    function resultMessage(message) {
        console.log(message);
        const messageContainer = document.getElementById('message-container');
        if (messageContainer) {
            messageContainer.innerHTML = message;
            messageContainer.style.display = 'block';
        } else {
            console.error('Message container not found', message);
            // Vous pouvez également envisager d'ajouter une alternative de fallback ici
            // Par exemple, créer dynamiquement l'élément s'il n'existe pas
            createMessageContainer(message);
        }
    }

    function createMessageContainer(message) {
        const container = document.createElement('div');
        container.id = 'message-container';
        container.style.display = 'block';
        container.innerHTML = message;
        document.body.appendChild(container);  // Changez cela en fonction de l'endroit où vous voulez l'ajouter
    }

    async function saveTransaction(orderData) {
        try {
            const token = await getAuthToken();

            const response = await fetch('{{ path('app_v2_user_order_save', {'pack': package.slug, 'id': app.user.id })}}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}` 
                },
                body: JSON.stringify(orderData),
            });

            if (!response.ok) {
                throw new Error('Failed to save transaction');
            }

            const data = await response.json();
            console.log('Transaction saved:', data);
        } catch (error) {
            console.error('Error saving transaction:', error);
        }
    }

    async function getAuthToken() {
        try {
            const response = await fetch('{{ path('api_login_check')}}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username: 'miandrisoa.olona@gmail.com',
                    password: 'HY9Hk86c',
                }),
            });

            if (!response.ok) {
                throw new Error('Failed to fetch token');
            }

            const data = await response.json();
            return data.token; 
        } catch (error) {
            console.error('Error obtaining token:', error);
            throw error;
        }
    }

    function loadPaypalSdk() {
        return new Promise((resolve, reject) => {
            if (window.paypal) {
                resolve();
            } else {
                const script = document.createElement('script');
                script.src = "https://www.paypal.com/sdk/js?client-id=AT3VNDtp1XLa-i5RiH6-64z02R0d2HawjrGs26oXddGZGnqJzxShg_Jwv3jJeyyCaE5gW-zrCZlZMG9J&components=buttons&enable-funding=venmo,paylater&currency=EUR";
                script.onload = () => resolve();
                script.onerror = () => reject(new Error('Échec du chargement du SDK PayPal'));
                document.head.appendChild(script);
            }
        });
    }

    function initializePaypalButtons() {

        window.paypal
        .Buttons({
            style: {
                layout: "vertical",
                color: "gold",
                label: "paypal",
            },
            message: {
                amount: {{ price }},
            } ,

            async createOrder() {
                try {
                    const response = await fetch("https://node.olona-talents.com/api/orders", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            cart: [
                                {
                                    id: "{{package.slug}}", 
                                    name: "{{package.name}}",
                                    quantity: 1,          
                                    price: {{ price }},   
                                    currency: "EUR",      
                                },
                            ],
                        }),
                    });

                    const orderData = await response.json();

                    if (orderData.id) {
                        return orderData.id;
                    }
                    const errorDetail = orderData?.details?.[0];
                    const errorMessage = errorDetail
                        ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`
                        : JSON.stringify(orderData);

                    throw new Error(errorMessage);
                } catch (error) {
                    console.error(error);
                    resultMessage(`Impossible d'initier le paiement PayPal...<br>${error}`);
                }
            } ,

            async onApprove(data, actions) {
                try {
                    const response = await fetch(
                        `https://node.olona-talents.com/api/orders/${data.orderID}/capture`,
                        {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                        }
                    );

                    const orderData = await response.json();
                    const errorDetail = orderData?.details?.[0];

                    if (errorDetail?.issue === "INSTRUMENT_DECLINED") {
                        return actions.restart();
                    } else if (errorDetail) {
                        throw new Error(
                            `${errorDetail.description} (${orderData.debug_id})`
                        );
                    } else if (!orderData.purchase_units) {
                        throw new Error(JSON.stringify(orderData));
                    } else {
                        const transaction =
                            orderData?.purchase_units?.[0]?.payments
                                ?.captures?.[0] ||
                            orderData?.purchase_units?.[0]?.payments
                                ?.authorizations?.[0];
                        resultMessage(
                            `Transaction ${transaction.status}: ${transaction.id}`
                        );
                        console.log(
                            "Capture result",
                            orderData,
                            JSON.stringify(orderData, null, 2)
                        );
                        await saveTransaction(orderData);
                    }
                } catch (error) {
                    console.error(error);
                    resultMessage(
                        `Désolé, votre transaction n'a pas pu être traitée...<br>${error}`
                    );
                }
            } ,
        })
        .render("#paypal-button-container"); 

    }
</script>
{% endblock %}
